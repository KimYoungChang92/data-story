layer_concatenate(name = 'concat_layer') %>%
layer_dense(1, activation = 'linear',name = 'dense_layer')
model <- keras_model(inputs, outputs)
model %>% compile(optimizer = 'adam', loss = 'mean_squared_error', metrics = 'mse')
}
sampling_generator <- function(df, batch_size) {
function() {
df.sample <- df %>% sample_n(batch_size)
X_sample <- as.matrix(df.sample %>% select(starts_with('shifted_')))
t <- ncol(X_sample)
X_sample <- keras_array(X_sample)
X_sample <- array_reshape(X_sample, c(-1,t,1))
Y_sample <- (df.sample$label)
list(X_sample, Y_sample)
}
}
model1 <- model.lstm(12, 10)
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/lstm_model.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/lstm_model_%Y%m%d_%H%M')))
hist1 <- model1 %>%
fit_generator(
sampling_generator(df ,batch_size = 8),
callbacks = callbacks,
steps_per_epoch = 10,
epochs = 50,
verbose = 1,
validation_data = sampling_generator(df, batch_size = 32),
validation_steps = 1)
df.test <- sampling_generator(df,360)()[[1]]
pred <- model1 %>% predict(df.test)
df$pred.lstm <- pred[,1]
df %>%
select(month_index,label, pred.xgb, pred.lstm) %>%
melt(id.vars = 'month_index') %>%
ggplot(aes( x= month_index, y = value, color = variable)) +geom_line()
library(Metrics)
with(df, rmse(label, pred.xgb))
with(df, rmse(label, pred.lstm))
cnn <- inputs %>%
layer_conv_1d(filters = 10, kernel_size = 3, padding = 'same')
cnn
model.lstm <- function(dim_t, k, cnn){
inputs <- layer_input(shape = c(dim_t,1), name = 'input_layer')
lstm <- inputs %>%
layer_lstm(units = k, go_backwards = T, name = 'lstm_layer')
all_in_use <- c(inputs %>% layer_flatten(),
lstm)
if(cnn){
cnn <- inputs %>%
layer_conv_1d(filters = 10, kernel_size = 3, padding = 'same')
all_in_use <- c(all_in_use, cnn %>% layer_flatten())
}
outputs <- all_in_use %>%
layer_concatenate(name = 'concat_layer') %>%
layer_dense(1, activation = 'linear',name = 'dense_layer')
model <- keras_model(inputs, outputs)
model %>% compile(optimizer = 'adam', loss = 'mean_squared_error', metrics = 'mse')
}
model1 <- model.lstm(12, 10)
model1 <- model.lstm(12, 10, cnn = F)
model1 %>% summary()
model2 <- model.lstm(12, 10, cnn = T)
model2 %>% summary()
model1 <- model.lstm(12, 10, cnn = T)
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/lstm_model.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/lstm_model_%Y%m%d_%H%M')))
hist1 <- model1 %>%
fit_generator(
sampling_generator(df ,batch_size = 8),
callbacks = callbacks,
steps_per_epoch = 10,
epochs = 50,
verbose = 1,
validation_data = sampling_generator(df, batch_size = 32),
validation_steps = 1)
df.test <- sampling_generator(df,360)()[[1]]
pred <- model1 %>% predict(df.test)
df$pred.lstm <- pred[,1]
with(df, rmse(label, pred.lstm))
with(df, rmse(label, pred.xgb))
df %>%
select(month_index,label, pred.xgb, pred.lstm) %>%
melt(id.vars = 'month_index') %>%
ggplot(aes( x= month_index, y = value, color = variable)) +geom_line()
model1 <- model.lstm(12, 10, cnn = F)
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/lstm_model.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/lstm_model_%Y%m%d_%H%M')))
hist1 <- model1 %>%
fit_generator(
sampling_generator(df ,batch_size = 8),
callbacks = callbacks,
steps_per_epoch = 10,
epochs = 50,
verbose = 1,
validation_data = sampling_generator(df, batch_size = 32),
validation_steps = 1)
df.test <- sampling_generator(df,360)()[[1]]
pred <- model1 %>% predict(df.test)
df$pred.lstm <- pred[,1]
with(df, rmse(label, pred.lstm))
df %>%
select(month_index,label, pred.xgb, pred.lstm) %>%
melt(id.vars = 'month_index') %>%
ggplot(aes( x= month_index, y = value, color = variable)) +geom_line()
model.lstm <- function(dim_t, k, cnn, deep){
inputs <- layer_input(shape = c(dim_t,1), name = 'input_layer')
lstm <- inputs %>%
layer_lstm(units = k, go_backwards = T, name = 'lstm_layer')
all_in_use <- c(inputs %>% layer_flatten(),
lstm)
if(cnn){
cnn <- inputs %>%
layer_conv_1d(filters = 10, kernel_size = 3, padding = 'same')
all_in_use <- c(all_in_use, cnn %>% layer_flatten())
}
if(deep){
outputs <- all_in_use %>%
layer_concatenate(name = 'concat_layer') %>%
layer_dropout(0.5) %>%
layer_dense(128, activation = 'relu') %>%
layer_dropout(0.5) %>%
layer_dense(1, activation = 'linear',name = 'dense_layer')
} else {
outputs <- all_in_use %>%
layer_concatenate(name = 'concat_layer') %>%
layer_dense(1, activation = 'linear',name = 'dense_layer')
}
model <- keras_model(inputs, outputs)
model %>% compile(optimizer = 'adam', loss = 'mean_squared_error', metrics = 'mse')
}
sampling_generator <- function(df, batch_size) {
function() {
df.sample <- df %>% sample_n(batch_size)
X_sample <- as.matrix(df.sample %>% select(starts_with('shifted_')))
t <- ncol(X_sample)
X_sample <- keras_array(X_sample)
X_sample <- array_reshape(X_sample, c(-1,t,1))
Y_sample <- (df.sample$label)
list(X_sample, Y_sample)
}
}
model1 <- model.lstm(12, 10, cnn = T, deep = T)
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/lstm_model.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/lstm_model_%Y%m%d_%H%M')))
hist1 <- model1 %>%
fit_generator(
sampling_generator(df ,batch_size = 8),
callbacks = callbacks,
steps_per_epoch = 10,
epochs = 50,
verbose = 1,
validation_data = sampling_generator(df, batch_size = 32),
validation_steps = 1)
df.test <- sampling_generator(df,360)()[[1]]
pred <- model1 %>% predict(df.test)
df$pred.lstm <- pred[,1]
with(df, rmse(label, pred.lstm))
df %>%
select(month_index,label, pred.xgb, pred.lstm) %>%
melt(id.vars = 'month_index') %>%
ggplot(aes( x= month_index, y = value, color = variable)) +geom_line()
mnist <- dataset_mnist()
names(mnist)
class(mnist$train)
names(mnist$train)
dim(mnist$train$x)
class(mnist$train$x)
x <- mnist$train$x
x[0]
x[1]
x[1,,]
dim(x[1,,])
dim(x[1:2,,])
dim(x[0,,])
x[0,,]
sample(1:10, 3)
nrow(x)
dim(x)
x_gen <- my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- array[inSample, ,]
x.sample <- array_reshape(x.sample, c(nrow(x), 784))
y.sample <- y[inSample]
list(x,sample, y.sample)
}
}
my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- array[inSample, ,]
x.sample <- array_reshape(x.sample, c(nrow(x), 784))
y.sample <- y[inSample]
list(x,sample, y.sample)
}
}
x_gen <- my_generator()
x_gen <- my_generator(mnist$train$x, mnist$train$y, 4)
x_gen()
my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(nrow(x), 784))
y.sample <- y[inSample]
list(x,sample, y.sample)
}
}
x_gen <- my_generator(mnist$train$x, mnist$train$y, 4)
x_gen()
my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- x[inSample, ,]
x.sample <- array_reshape(batch_size, c(nrow(x), 784))
y.sample <- y[inSample]
list(x,sample, y.sample)
}
}
x_gen <- my_generator(mnist$train$x, mnist$train$y, 4)
x_gen()
x <- mnist$train$x
y <- mnist$train$y
batch_size <- 4
inSample <- sample(1:nrow(x), batch_size)
inSm
x.sample <- x[inSample, ,]
x.sample
x.sample <- array_reshape(x.sample, c(nrow(x), 784))
array_reshape(x.sample, c(batch_size, 784))
my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(batch_size, 784))
y.sample <- y[inSample]
list(x,sample, y.sample)
}
}
gen <- my_generator(x,y,4)
gen()
my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(batch_size, 784))
y.sample <- y[inSample]
list(x.sample, y.sample)
}
}
gen <- my_generator(x,y,4)
gen
gen()
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/mnist_%Y%m%d_%H%M.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/lstm_model_%Y%m%d_%H%M')))
library(keras)
# donwnload dataset
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
# compile model
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(batch_size, 784))
y.sample <- to_categorical(y[inSample],10)
list(x.sample, y.sample)
}
}
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/mnist_%Y%m%d_%H%M.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/mnist_%Y%m%d_%H%M')))
nrow(x_test)
hist <- model %>%
fit_generator(
my_generator(x_train,y_train,batch_size = 128),
callbacks = callbacks,
steps_per_epoch = 10,
epochs = 50,
verbose = 1,
validation_data = sampling_generator(x_test,y_test,batch_size = 1280),
validation_steps = 1)
my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(batch_size, 784))
y.sample <- to_categorical(y[inSample],10)
list(x.sample, y.sample)
}
}
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/mnist_%Y%m%d_%H%M.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/mnist_%Y%m%d_%H%M')))
gen <- my_generator(x_train, y_train, 4)
gen()
y_test
hist <- model %>%
fit_generator(
my_generator(x_train,y_train,batch_size = 128),
callbacks = callbacks,
steps_per_epoch = 10,
epochs = 50,
verbose = 1,
validation_data = my_generator(x_test,y_test,batch_size = 1280),
validation_steps = 1)
valid.set <- my_generator(x_test,y_test,batch_size = nrow(x_test))()
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(batch_size, 784))
y.sample <- to_categorical(y[inSample],10)
list(x.sample, y.sample)
}
}
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/mnist_%Y%m%d_%H%M.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/mnist_%Y%m%d_%H%M')))
valid.set <- my_generator(x_test,y_test,batch_size = nrow(x_test))()
hist <- model %>%
fit_generator(
my_generator(x_train,y_train,batch_size = 128),
callbacks = callbacks,
steps_per_epoch = 10,
epochs = 50,
verbose = 1,
validation_data = valid.set),
validation_steps = 1)
hist <- model %>%
fit_generator(
my_generator(x_train,y_train,batch_size = 128),
callbacks = callbacks,
steps_per_epoch = 10,
epochs = 50,
verbose = 1,
validation_data = valid.set,
validation_steps = 1)
hist <- model %>%
fit_generator(
my_generator(x_train,y_train,batch_size = 128),
callbacks = callbacks,
steps_per_epoch = 100,
epochs = 50,
verbose = 1,
validation_data = valid.set,
validation_steps = 1)
x <- 1:12
x
my_generator <- function(x,y,batch_size) {
i <- 1
function() {
inSample <- i:(i+batch_size-1)
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(batch_size, 784))
y.sample <- to_categorical(y[inSample],10)
i <<- i+batch_size
list(x.sample, y.sample)
}
}
gen <- my_generator(x_train, y_train,4)
gen()
gen()
gen()[[2]]
gen()[[2]]
gen()[[2]]
128*100
nrow(x_train)
hist <- model %>%
fit_generator(
my_generator(x_train,y_train,batch_size = 128),
callbacks = callbacks,
steps_per_epoch = 500,
epochs = 50,
verbose = 1,
validation_data = valid.set,
validation_steps = 1)
my_generator <- function(x,y,batch_size) {
i <- 1
function() {
if(i > nrow(x)){
return(NULL)
} else if (i+batch_size-1 > nrow(x)){
inSample <- i:nrow(x)
} else {
inSample <- i:(i+batch_size-1)
}
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(batch_size, 784))
y.sample <- to_categorical(y[inSample],10)
i <<- i+batch_size
return(list(x.sample, y.sample))
}
}
gen <- my_generator(x_train, y_train, 4)
gen()[[2]]
gen()[[2]]
my_generator <- function(x,y,batch_size) {
i <- 1
function() {
if(i > nrow(x)){
return(NULL)
} else if (i+batch_size-1 > nrow(x)){
inSample <- i:nrow(x)
} else {
inSample <- i:(i+batch_size-1)
}
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(batch_size, 784))
y.sample <- to_categorical(y[inSample],10)
i <<- i+batch_size
return(list(x.sample, y.sample))
}
}
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/mnist_%Y%m%d_%H%M.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/mnist_%Y%m%d_%H%M')))
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
hist <- model %>%
fit_generator(
my_generator(x_train,y_train,batch_size = 128),
callbacks = callbacks,
steps_per_epoch = 500,
epochs = 50,
verbose = 1,
validation_data = valid.set,
validation_steps = 1)
my_generator <- function(x,y,batch_size) {
i <- 1
function() {
if(i > nrow(x)){
return(NULL)
} else if (i+batch_size-1 > nrow(x)){
inSample <- i:nrow(x)
} else {
inSample <- i:(i+batch_size-1)
}
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(length(inSample), 784))
y.sample <- to_categorical(y[inSample],10)
i <<- i+batch_size
return(list(x.sample, y.sample))
}
}
callbacks <- list(
callback_csv_logger(format(Sys.time(),'model/log/mnist_%Y%m%d_%H%M.csv')),
callback_early_stopping(patience = 5),
callback_tensorboard(format(Sys.time(),'model/tensorboard/mnist_%Y%m%d_%H%M')))
valid.set <- my_generator(x_test,y_test,batch_size = nrow(x_test))()
hist <- model %>%
fit_generator(
my_generator(x_train,y_train,batch_size = 128),
callbacks = callbacks,
steps_per_epoch = 500,
epochs = 50,
verbose = 1,
validation_data = valid.set,
validation_steps = 1)
my_generator <- function(x,y,batch_size) {
function() {
inSample <- sample(1:nrow(x), batch_size)
x.sample <- x[inSample, ,]
x.sample <- array_reshape(x.sample, c(length(inSample), 784))
y.sample <- to_categorical(y[inSample],10)
return(list(x.sample, y.sample))
}
}
?fit_generator
hist <- model %>%
fit_generator(
my_generator(x_train,y_train,batch_size = 128),
callbacks = callbacks,
steps_per_epoch = 500,
epochs = 50,
verbose = 1,
validation_data = valid.set,
validation_steps = 1)
