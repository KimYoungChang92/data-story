dim(x)
dim(theta0)
theta0 <- t(rep(0, ncol))
dim(theta0)
theta0 <- (rep(0, ncol))
dim(theta0)
theta0 <- matrix(rep(0, ncol),10,1)
theta0
loss(theta0)
x %*% theta0
dim(x)
dim(theta0)
x
y <- as.matrix(y)
x <- as.matrix(x)
loss(theta)
loss(theta0)
loss <- function(theta) 0.5*sum(y-x %*% theta)**2 / length(y)
loss(theta0)
grad <- function(theta) t(theta) %*% t(y-x %*% theta) / length(y)
grad(theta0)
dim(y)
y <- as.matrix(y,ncol =1)
dim(y)
dim(theta0)
dim(x)
grad <- function(theta) t(x) %*% t(y-x %*% theta) / length(y)
grad(theta0)
x %*% theta0
y - x %*% theta0
dim(x)
dim(t(x))
grad <- function(theta) t(x) %*% (y-x %*% theta) / length(y)
grad(theta0)
lambda <- 0.5
loss <- function(theta) 0.5*sum(y-x %*% theta)**2 / length(y) + 0.5*lambda*theta**2
loss(theta0)
loss <- function(theta) 0.5*sum(y-x %*% theta)**2 / length(y) + 0.5*sum(lambda*theta**2) / length(theta)
loss(theta0)
theta0 <- matrix(rep(0.5, ncol),10,1)
loss(theta0)
grad <- function(theta) t(x) %*% (y-x %*% theta) / length(y) + lambda * sum(abs(theta))
grad(theta0)
alpha <- 0.1
loss0 <- loss(theta0)
grad0 <- grad(theta0)
loss0
theta1 <- theta0 - alpha*grad(theta0)
loss(theta1)
theta1 <- theta0 + alpha*grad(theta0)
loss(theta1)
grad <- function(theta) t(x) %*% (y-x %*% theta) / length(y) + lambda * sum(abs(theta))/ length(theta)
loss0 <- loss(theta0)
grad0 <- grad(theta0)
theta1 <- theta0 - alpha*grad(theta0)
loss0
loss1
loss(theta1)
grad0
theta0
alpha <- 0.001
theta1 <- theta0 - alpha*grad(theta0)
loss(theta1)
sum(abs(theta0))
sum(abs(theta0))/length(theta0)
x
y
theta0 <- matrix(rep(20, ncol),10,1)
loss0 <- loss(theta0)
grad0 <- grad(theta0)
grad0
loss0
theta1 <- theta0 - alpha*grad(theta0)
loss1 <- loss(theta1)
theta1 <- theta0 + alpha*grad(theta0)
loss1 <- loss(theta1)
grad <- function(theta) -t(x) %*% (y-x %*% theta) / length(y) + lambda * sum(abs(theta))/ length(theta)
loss0 <- loss(theta0)
grad0 <- grad(theta0)
theta1 <- theta0 + alpha*grad(theta0)
loss1 <- loss(theta1)
alpha <- 0.1
theta1 <- theta0 + alpha*grad(theta0)
loss1 <- loss(theta1)
theta1 <- theta0 - alpha*grad(theta0)
loss1 <- loss(theta1)
loss <- function(theta) 0.5*sum((y-x %*% theta)**2) / length(y) + 0.5*sum(lambda*theta**2) / length(theta)
grad <- function(theta) -t(x) %*% (y-x %*% theta) / length(y) + lambda * sum(abs(theta))/ length(theta)
loss0 <- loss(theta0)
grad0 <- grad(theta0)
theta1 <- theta0 - alpha*grad(theta0)
loss1 <- loss(theta1)
loss <- function(theta) 0.5*sum((y-x %*% theta)**2) / length(y) + 0.5*lambda*sum(theta**2) / length(theta)
grad <- function(theta) -t(x) %*% (y-x %*% theta) / length(y) + lambda * sum(abs(theta))/ length(theta)
loss0 <- loss(theta0)
theta0 <- matrix(rep(0, ncol),10,1)
lambda <- 0.5
alpha <- 0.1
loss <- function(theta) 0.5*sum((y-x %*% theta)**2) / length(y) + 0.5*lambda*sum(theta**2) / length(theta)
grad <- function(theta) -t(x) %*% (y-x %*% theta) / length(y) + lambda * sum(abs(theta))/ length(theta)
loss0 <- loss(theta0)
grad0 <- grad(theta0)
theta1 <- theta0 - alpha*grad(theta0)
loss1 <- loss(theta1)
cbind(theta0,theta1)
grad(theta0)
loop <- function(theta){
l <- loss(theta)
g <- grad(theta)
theta <- theta  - alpha*g
return(list(loss = l, grad = g, theta = theta))
}
loop(theta0)
for (i in 1:5) theta0 <- theta0 - alpha*grad(theta0);print (loss(theta0))
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print (loss(theta0))}
for (i in 1:5) {
theta0 <- theta0 + alpha*grad(theta0)
print (loss(theta0))}
theta0 <- matrix(rep(0, ncol),10,1)
lambda <- 0.5
alpha <- 0.1
loss <- function(theta) 0.5*sum((y-x %*% theta)**2)
grad <- function(theta) -t(x) %*% (y-x %*% theta)
for (i in 1:5) {
theta0 <- theta0 + alpha*grad(theta0)
print (loss(theta0))}
theta0 <- matrix(rep(0, ncol),10,1)
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print (loss(theta0))}
alpha <- 0.0001
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print (loss(theta0))}
theta0 <- matrix(rep(0, ncol),10,1)
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print(theta0)
print (loss(theta0))}
nrow
grad <- function(theta) t(x) %*% (y-x %*% theta)/nrow
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print(theta0)
print (loss(theta0))}
theta0 <- matrix(rep(0, ncol),10,1)
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print (loss(theta0))}
grad <- function(theta) t(x) %*% (y-x %*% theta)
theta0 <- matrix(rep(0, ncol),10,1)
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print (loss(theta0))}
alpha <- 100
theta0 <- matrix(rep(0, ncol),10,1)
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print (loss(theta0))}
alpha <- 0.5
theta0 <- matrix(rep(0, ncol),10,1)
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print (loss(theta0))}
loss <- function(theta) 0.5*sum((y-x %*% theta)**2) /nrow
grad <- function(theta) t(x) %*% (y-x %*% theta) /nrow
theta0 <- matrix(rep(0, ncol),10,1)
for (i in 1:5) {
theta0 <- theta0 - alpha*grad(theta0)
print (loss(theta0))}
theta0 <- matrix(rep(0, ncol),10,1)
for (i in 1:5) {
theta0 <- theta0 + alpha*grad(theta0)
print (loss(theta0))}
loss <- function(x) x**3+x+1
plot(seq(0,1,.01), loss(seq(0,1,0.01)))
plot(seq(-1,1,.01), loss(seq(-1,1,0.01)))
loss <- function(x) x**2+x+1
plot(seq(-1,1,.01), loss(seq(-1,1,0.01)))
grad <- function(x) 2*x+1
x0 <- 0
x0 <- 0
for(i in 1:5){
x0 <- x0 + 0.1*grad(x0)
print(loss(x0))
}
x0 <- 0
for(i in 1:5){
x0 <- x0 - 0.1*grad(x0)
print(loss(x0))
}
x0 <- 0
for(i in 1:5){
x0 <- x0 - 0.5*grad(x0)
print(loss(x0))
}
x0 <- 0
for(i in 1:5){
x0 <- x0 - 0.8*grad(x0)
print(loss(x0))
}
x0 <- 0
for(i in 1:10){
x0 <- x0 - 0.8*grad(x0)
print(loss(x0))
}
?lm
install.packages("dbscan")
library(dbscan)
?dbscan::dbscan
data(iris)
iris <- as.matrix(iris[,1:4])
iris
kNNdistplot(iris, k = 5)
abline(h=.4, col = "red", lty=2)
res <- dbscan(iris, eps = .4, minPts = 5)
res
pairs(iris, col = res$cluster + 1L)
set.seed(665544)
n <- 100
x <- cbind(
x = runif(10, 0, 10) + rnorm(n, sd = 0.2),
y = runif(10, 0, 10) + rnorm(n, sd = 0.2)
)
x
res <- dbscan(x, eps = .3, minPts = 3)
res
plot(x, col=res$cluster)
points(x[res$cluster==0,], pch = 3, col = "grey")
res$cluster
res$cluster
hullplot(x, res)
x <- read.csv("~/Desktop/kaggle/popcorn/labeledTrainData.tsv")
x <- read.delim("~/Desktop/kaggle/popcorn/labeledTrainData.tsv")
View(head(x))
write.csv(x,file = "labeledTrainData.csv",row.names = F)
x <- read.csv("~/Desktop/kaggle/popcorn/labeledTrainData.csv")
head(x)
library(jsonlite)
json <- toJSON(x)
writeLines(json,"labeledTraingData.json")
View(df)
df <- data.frame(id = c(1,2,3,4,5), item = c("a b c","a b","b","a c","b c"))
View(df)
tuplize <- function(x) {
id <- x$id
item <- x$item
items <- strsplit(item," ")
res <- data.frame(item = items, id = repï¼ˆid,length(items))
res
}
tuplize <- function(x) {
id <- x$id
item <- x$item
items <- strsplit(item," ")
res <- data.frame(item = items, id = rep(id,length(items))
res
}
tuplize <- function(x) {
id <- x$id
item <- x$item
items <- strsplit(item," ")
res <- data.frame(item = items, id = rep(id,length(items))
res
}
rep("a",3)
tuplize <- function(x){
id <- x$id
item <- x$item
items <- strsplit(item," ")
res <- data.frame(item = items, id = rep(id,length(items))
res
}
tuplize <- function(x){
id <- x$id
item <- x$item
items <- strsplit(item," ")
res <- data.frame(item = items, id = rep(id,length(items))
return(res)
}
tuplize <- function(x){
id <- x$id
item <- x$item
items <- strsplit(item," ")
res <- data.frame(item = items, id = rep(id,length(items))
return(res)}
tuplize <- function(x){
id <- x$id
item <- x$item
items <- strsplit(item," ")
res <- data.frame(item = items, id = rep(id,length(items)))
res}
tuplize(df[,1])
tuplize(head(df,1))
x <- head(df,1)
x
x$id
id <- x$id
item <- x$item
id
item
items <- unlist(strsplit(item," "))
item <- x$item
items <- unlist(strsplit(item," "))
item
item <- as.character(x$item)
items <- unlist(strsplit(item," "))
items
res <- data.frame(item = items, id = rep(id,length(items)))
res
tuplize <- function(x){
id <- x$id
item <- as.character(x$item)
items <- unlist(strsplit(item," "))
res <- data.frame(item = items, id = rep(id,length(items)))
res}
tuplize(head(df,1))
tuplize(head(df,2))
res <- apply(df,1,tuplize)
tuplize <- function(x){
id <- x[1]
item <- as.character(x[2])
items <- unlist(strsplit(item," "))
res <- data.frame(item = items, id = rep(id,length(items)))
res}
res <- apply(df,1,tuplize)
res
tmp <- do.call("rbind",res)
View(tmp)
res <- do.call("rbind",res)
library(dplyr)
library(data.table)
res %>% group_by(item) %>% summarise(ids = n_distinct(id))
head(df)
x <- rnorm(100)
y <- rnomr(100)
y <- rnorm(100)
plot(x,y)
library(tm)
?tm::as.VCorpus
Sys.getenv("SPARK_HOME")
Sys.getenv(SPARK_HOME="/Users/chaoranliu/Downloads/spark-1.5.0-bin-hadoop2.6")
Sys.setenv(SPARK_HOME="/Users/chaoranliu/Downloads/spark-1.5.0-bin-hadoop2.6")
file.path(Sys.getenv("SPARK_HOME"),"R")
file.path(Sys.getenv("SPARK_HOME"),"R","lib")
library(SparkR, lib.loc = file.path(Sys.getenv("SPARK_HOME"),"R","lib"))
sc <- sparkR.init(master = "local[*]")
sc
sc <- sparkR.init(master = "local[*]")
a
df
mtcars
?SparkR::dataFrame
?createDataFrame
sc
sqlContext <- sparkRSQL.init(sc)
df <- createDataFrame(sqlContext,mtcars)
printSchema(df)
show(df)
show(df,10)
head(df)
model <- glm(mpg~.,data = df, family = "gaussian")
summary(model)
predictions <- predict(model,df)
head(predictions)
class(predictions)
printSchema(predictions)
head(select(predictions,'mpg','prediction'))
sparkR.stop()
data3 <- c(10,2,31,12)
data3
mean(data3)
median(data3)
mode(data3)
var(data3)
sd(data3)
x <- c(1,2,3)
y <- c(4,7,13)
x
y
cor(x,y)
21*0.2^2(0.8^5)
21*0.2^2*(0.8^5)
1-0.8^7 - 7*0.2*0.8^6
1+0.25
sqrt(1.25)
70*2.54
2.54^2*25
p <- 0.495
sigma2 <- p*(1-p)
ci <- sqrt(sigam2/10000)*1.96
ci <- sqrt(sigma2/10000)*1.96
ci
0.495-ci
0.495+ci
rm(list = ls())
gc()
library(dplyr)
library(data.table)
source("~/Desktop/start.sparkR.R")
sparkR.session(master = "local[*]")
setLogLevel("ERROR")
df <- read.parquet("~/Desktop/dummy_review_vote.parquet/")
count(df)
show(df)
show(df,10)
?show
SparkR::show(df)
View(df)
head(df)
printSchema(df)
column(df)
SparkR::colnames(df)
select(df,"reviewid")
?select
select(df,"*")
x <- select(df,"reviewid")
x <- select(df,df$reviewid)
sparkR.version()
sparkR.version
sparkR.session()
sparkR.session.stop()
sparkR.stop()
source("~/Desktop/start.sparkR.R")
sparkR.session(master = "local[*]")
df <- read.parquet("~/Desktop/dummy_review_vote.parquet/")
colnames(df)
show(df)
head(df)
setLogLevel("ERROR")
?group_by
group_by(df,"helpful","count")
count(group_by(df,"helpful"))
head(count(group_by(df,"helpful")))
x <- filter(df, "helpful"==0)
x <- filter(df, "helpful"===0)
x <- filter(df, col("helpful")==0)
?filter
x <- filter(df, "helpful==0")
count(x)
avg(df,"helpful")
?avg
avg(df$helpful)
collect(avg(df$helpful))
head(avg(df$helpful))
select(df,(avg(df$helpful))
)
show(select(df,(avg(df$helpful)))
)
head(select(df,(avg(df$helpful))))
collect
?collect
?SparkR::spark.randomForest
?spark_install
library(sparklyr)
?spark_install
version
spark_installed_versions()
sc <- spark_connect(master = "local")
sc
df <- read.csv("~/Desktop/kaggle/bike demand/train.csv")
df_ <- copy_to(sc,df,'bike')
src_tbls(sc)
library(dplyr)
src_tbls(sc)
?src_tbls
head(df_)
df_ %>% filter(count >=50)
df_ %>% filter(count >=500)
Sys.getenv(SPARK_HOME)
Sys.getenv('SPARK_HOME)
''
''
Sys.getenv('SPARK_HOME')
colnames(df_)
names(df_)
df_ %>% group_by(holiday) %>%
summarise(count = sum(count))
tmp <- df_ %>% group_by(holiday) %>% summarise(count = sum(count))
class(tmp)
tmp %>% collect
colnames(df_)
features <- c('season','holiday','workingday','weather','temp')
rf <- df_ %>% ml_random_forest(response = 'count',features = features, num.trees = 20, type = 'regression')
rf
names(rf)
rf$feature.importances
rf$categorical.transformations
rf$ml.options
a <- c(1,2,3)
b <- c("a","b","c")
a
b
as.integer(a)
as.numeric(a)
a
b
class(b)
as.factor(b)
c <- as.factor(b)
c
b
a
class(a)
b <- as.integer(a)
class(b)
data("iris")
View(iris)
246.66 + 1905.98
setwd("~/Desktop/github/e-commerce")
